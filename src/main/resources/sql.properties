# DB for all
sql.nextDbId: \
SELECT nextval('dbid')

sql.db1.person.update: \
UPDATE person SET family_name=:family_name, first_name=:first_name, second_name=:second_name WHERE person_id=:person_id;

sql.db1.person.insert: \
INSERT INTO person (family_name, first_name, second_name, person_id) \
VALUES (:family_name, :first_name, :second_name, :person_id)

sql.db1.users.insert: \
INSERT INTO users (username, password, user_id) \
VALUES (:username, :password, :user_id)

sql.db1.users.update: \
UPDATE users SET password=:password, username=:username WHERE user_id=:user_id;

sql.roles.select: \
SELECT * FROM roles ORDER BY role_sort

sql.db1.users.checkUsername: \
SELECT * FROM users WHERE username=:username

sql.db1.users.fromUsername: \
SELECT * FROM users LEFT JOIN person ON person_id=user_id WHERE username=:username
#SELECT * FROM users WHERE username=:username
#select username, pip, enabled from users where username=:username

sql.db1.user_role.delete_by_id: \
DELETE FROM user_roles WHERE user_role_id=:user_role_id 

sql.db1.user_role.delete_by_username_and_role: \
DELETE FROM user_roles WHERE username=:username AND role=:role

sql.db1.user_role.deleteConfirmation: \
DELETE FROM user_roles WHERE username=:username AND role='ROLE_WAITING_FOR_CONFIRMATION'

sql.db1.user_role.insert: \
INSERT INTO user_roles (username, role) VALUES (:username, :role_id)
#INSERT INTO user_roles (username, role, user_role_id) \
#VALUES (:username, :role, :user_role_id)

sql.db1.user.msp: \
SELECT * FROM doc ul, msp WHERE parent_id=:user_id AND reference=msp_id

sql.without_msp_employee.list: \
SELECT p.*, username FROM person p, users u, doc dEmployee \
LEFT JOIN  (SELECT rdMsp.doc_id rdMsp_id, rdMsp.* FROM doc rdMsp, doc dMsp WHERE rdMsp.reference=dMsp.doc_id) dMsp \
ON dMsp.parent_id=dEmployee.doc_id \
WHERE dEmployee.doctype = 13 AND rdMsp_id IS NULL AND p.person_id=dEmployee.doc_id AND person_id=u.user_id 

sql.without_msp_employee.role.list: \
SELECT user_id, r.*, ur.user_role_id FROM user_roles ur, users u, roles r WHERE role_id=role AND u.username=ur.username \
AND user_id IN (SELECT person_id FROM (${sql.without_msp_employee.list}) x)

sql.msp_employee.role.list: \
SELECT user_id, r.*, ur.user_role_id FROM user_roles ur, users u, roles r WHERE role_id=role AND u.username=ur.username \
AND user_id IN (SELECT person_id FROM (${sql.msp_employee.list}) x)

sql.msp_employee.list: \
SELECT p.*, username FROM person p, users u, doc dEmployee, doc dMsp \
WHERE dEmployee.doctype = 13 \
AND person_id=dEmployee.doc_id AND person_id=u.user_id \
AND dMsp.parent_id=dEmployee.doc_id AND dMsp.reference=:msp_id

sql.employee.list: \
SELECT * FROM employee

sql.selectUUI_byId: \
SELECT * FROM uuid WHERE uuid_dbid=:dbId

sql.insertUUI: \
INSERT INTO uuid (uuid_dbid, uuid_uuid) VALUES (:dbId, :uuid)

sql.doctype.path: \
SELECT dt.*, CONCAT(dt1.path, NVL2(dt1.doctype,'.',''),dt.doctype) path \
FROM doctype dt LEFT JOIN ( \
SELECT dt.*, CONCAT(dt1.doctype, NVL2(dt1.doctype,'.',''),dt.doctype) path \
FROM doctype dt LEFT JOIN doctype dt1 ON dt.parent_id=dt1.doctype_id) dt1 ON dt.parent_id=dt1.doctype_id

# DB медичні документи
sql.doc.byId: \
${sql.doc.children.template} AND doc_id=:doc_id

sql.doc1.byId: \
SELECT * FROM doc d \
LEFT JOIN doctimestamp dts ON d.doc_id=dts.doctimestamp_id \
LEFT JOIN docchecked dck ON d.doc_id=docchecked_id \
LEFT JOIN docbody db ON d.doc_id=db.docbody_id \
WHERE doc_id=:doc_id \
ORDER BY doc_id DESC

sql.count.doc.to.check: \
SELECT count(*) FROM (${sql.doc.to.check}) x

sql.doc.to.check: \
SELECT * FROM doctimestamp dts \
LEFT JOIN docchecked dck ON doctimestamp_id=docchecked_id \
WHERE updated!=checked

sql.doc.children.template: \
SELECT * FROM doc d \
LEFT JOIN doctimestamp dts ON d.doc_id=dts.doctimestamp_id \
LEFT JOIN docchecked dck ON d.doc_id=docchecked_id \
LEFT JOIN docbody db ON d.doc_id=db.docbody_id \
, (SELECT doctype_id, path FROM (${sql.doctype.path}) t) t \
WHERE t.doctype_id=d.doctype

sql.doc.children: \
${sql.doc.children.template} AND parent_id IN \
(SELECT d.doc_id FROM doc d WHERE d.doc_id=:doc_id) \
ORDER BY doc_id DESC

sql.doc.children.children: \
${sql.doc.children.template} AND parent_id IN \
(SELECT d.doc_id  FROM doc d, doc dp WHERE dp.doc_id=:doc_id AND dp.doc_id=d.parent_id) \
ORDER BY doc_id DESC

sql.doc.children1: \
SELECT * FROM doc d \
LEFT JOIN doctimestamp dts ON d.doc_id=dts.doctimestamp_id \
LEFT JOIN docchecked dck ON d.doc_id=docchecked_id \
LEFT JOIN docbody db ON d.doc_id=db.docbody_id \
, (SELECT doctype_id, path FROM (${sql.doctype.path}) t) t \
WHERE t.doctype_id=d.doctype AND parent_id=:parent_id \
ORDER BY doc_id DESC

sql.doc.update.reference: \
UPDATE doc SET reference=:reference WHERE doc_id=:doc_id;

sql.doc.insert: \
INSERT INTO doc (doc_id, doctype, parent_id) VALUES (:doc_id, :doctype, :parent_id)

sql.employee.update: \
UPDATE employee SET employee_info=:employee_info WHERE employee_id=:doc_id;

sql.employee.insert: \
INSERT INTO employee (employee_id, employee_info) VALUES (:doc_id, :employee_info)

sql.msp.update: \
UPDATE msp SET msp_name=:name, msp_public_name=:public_name WHERE msp_id=:doc_id;

sql.msp.insert: \
INSERT INTO msp (msp_id, msp_name, msp_public_name) VALUES (:doc_id, :name, :public_name)

sql.msp.seek: \
SELECT * FROM msp WHERE LOWER(msp_name) LIKE LOWER(:seek_msp)

sql.msp.list: \
SELECT msp_id doc_id, m.* FROM msp m ORDER BY msp_id DESC

sql.minsertDocElementWithDocbodysp.list: \
SELECT msp_id doc_id, m.* FROM msp m ORDER BY msp_id DESC

#docbody
sql.docbody.byDocbodyId: \
SELECT docbody FROM docbody WHERE docbody_id=:docbody_id

sql.docbody.byId: \
SELECT docbody FROM docbody WHERE docbody_id=:doc_id

sql.docbody.insertEmpty: \
INSERT INTO docbody (docbody_id) VALUES (:doc_id)

sql.docbody.update: \
UPDATE docbody SET docbody=:docbody WHERE docbody_id=:docbody_id;

sql_doc_update_docbody: \
UPDATE doc SET docbody=:docbody_id WHERE doc_id=:doc_id;

sql.doc.delete.children: \
DELETE FROM doc WHERE parent_id=:doc_id

sql.doc.delete: \
DELETE FROM doc WHERE doc_id=:doc_id
#docbody END

sql.doctimestamp.insert: \
INSERT INTO doctimestamp (doctimestamp_id, created, updated) VALUES (:doc_id, :created, :created)
sql_doctimestamp_update: \
UPDATE doctimestamp SET updated = :updated WHERE doctimestamp_id = :doc_id;

sql.docchecked.insert: \
INSERT INTO docchecked (docchecked_id, checked) VALUES (:doc_id, :checked)

sql.docchecked.update: \
UPDATE docchecked SET checked = :checked WHERE docchecked_id = :doc_id;
sql.docchecked.checked: \
UPDATE docchecked \
SET (checked) = (SELECT updated FROM doctimestamp WHERE doctimestamp_id=docchecked_id) \
WHERE docchecked_id = :doc_id;

#icpc2CodeExtention 
sql.icpc2Code.exclusion: \
SELECT i.* FROM exclusion e, demo_icpc2_ua i WHERE e.exclusion=i.code AND  e.code=:icpc2

sql.icpc2Code.consider: \
SELECT c.consider consider_name,* FROM icpc2consider c, demo_icpc2_ua i WHERE code=icpc2_code AND icpc2_code=:icpc2

sql.icpc2Code.inclusion: \
SELECT icpc2_code icpc2, inclusion FROM icpc2inclusion WHERE icpc2_code=:icpc2

sql.icpc2Code.icd10: \
SELECT d.icd_code, d.icd_id, d.icd_name FROM icpc2icd10 ii, icd d WHERE ii.icd10=d.icd_code AND icpc2=:icpc2

sql.icd10InIcpc2: \
SELECT ii.*, name, d.icd_code, d.icd_id,  d.icd_name FROM demo_icpc2_ua i, icpc2icd10 ii, icd d \
WHERE i.code=icpc2 AND ii.icd10=d.icd_code AND icd_code LIKE :icd_code
#icpc2CodeExtention END


sql.meddoc.icpc2Code.count: \
SELECT count(*) FROM (${sql.meddoc.icpc2Code}) x
sql.meddoc.icpc2Code.limit: \
${sql.meddoc.icpc2Code} LIMIT :limit

sql.meddoc.icpc2Code: \
SELECT * FROM demo_icpc2_ua \
WHERE LOWER(concat(code,name,shorttitle,icd10,inclusion,exclusion,criteria,consider,note)) LIKE LOWER(:seekStr)

sql.meddoc.icdCodeP1: \
SELECT DISTINCT(x.parentId) ppId, y.* \
FROM (${sql.meddoc.icdCode.limit}) x \
, (${sql.meddoc.icdParent}) y WHERE y.icd_id=x.parentId ORDER BY icd_id

sql.meddoc.icdCode.count: \
SELECT count(*) FROM (${sql.meddoc.icdCode}) x

sql.meddoc.icdCode.limit: \
${sql.meddoc.icdCode} LIMIT :limit

#WHERE icd_code NOT LIKE '%-%' AND icd_code NOT LIKE '%.%' \
sql.meddoc.icdCode: \
SELECT * FROM (${sql.meddoc.icdParent}) icd \
WHERE icd_code NOT LIKE '%-%' \
AND (LOWER(icd_code) LIKE LOWER(:seekStr) OR LOWER(icd_name) LIKE LOWER(:seekStr))

sql.meddoc.icdChildren: \
${sql.meddoc.icdParent} AND icd10uatree_parent_id=:parentId

sql.meddoc.icdParent: \
SELECT t.icd10uatree_parent_id parentId, icd_id, i.icd_code,i.icd_name, i.icd_level \
FROM icd i, icd10uatree t WHERE icd_id=icd10uatree_id

sql.meddoc.icd: \
SELECT * FROM icd

sql.meddoc.protocol.select: \
SELECT protocol_id, protocol_name FROM protocol

sql.meddoc.protocol.byId: \
SELECT docbody FROM docbody WHERE docbody_id=:dbId
#SELECT protocol_doc FROM protocol WHERE protocol_id=:dbId

sql.meddoc.protocol.name.update: \
UPDATE protocol SET protocol_name=:name WHERE protocol_id=:dbId;

sql.meddoc.docbody.update: \
UPDATE docbody SET docbody=:doc WHERE docbody_id=:dbId;
#UPDATE protocol SET protocol_name=:name, protocol_doc=:doc WHERE protocol_id=:dbId;

sql.meddoc.protocol.datadictionary.icd10: \
SELECT d.doc_id,d.parent_id,d.doctype, p.path,i.icd_id,i.icd_code,i.icd_name \
FROM ( \
SELECT * FROM doc WHERE parent_id=:parent_id AND doctype=7 \
) d, protocoldd2icd10 pi ,icd i, \
(${sql.doctype.path}) p \
WHERE pi.protocoldd=d.doc_id \
AND i.icd_id=pi.icd10 \
AND p.doctype_id=d.doctype \
ORDER BY doc_id DESC

sql.meddoc.protocol.insert: \
INSERT INTO protocol (protocol_id, protocol_name, protocol_doc) VALUES (:nextDbId, :name, :doc)

sql.meddoc.protocoldd2icd10.insert: \
INSERT INTO protocoldd2icd10 (protocoldd, icd10, doctype) VALUES (:nextDbId, :icd_id, 7)

sql.meddoc.icpc2icd10.code: \
SELECT p.*, icd_name name FROM icpc2icd10 p, icd i WHERE i.icd_code=p.icd10 AND p.icpc2 = :code;

sql.meddoc.demo_icpc2_ua.exclusion: \
SELECT e.*, d.name FROM exclusion e , demo_icpc2_ua d WHERE d.code = e.exclusion AND e.code = :code

sql.meddoc.openIcPc2SubGroup: \
SELECT * FROM demo_icpc2_ua WHERE code=:code
#SELECT * FROM ICPC_2e_uk_v50 WHERE code=:code

sql.meddoc.openIcPc2SubGroup.en: \
SELECT * FROM ICPC_2e_no_v50 WHERE code=:code

sql.meddoc.en.openIcPc2SubGroup: \
SELECT * FROM ICPC_2e_no_v50 WHERE code=:code

# DB медичний заклад
sql.queue.queue_today: \
SELECT q.parent_id msp_id, d.reference physitian_id, qts.*, pt.*, p.* \
FROM doc q, doc p, doc d, patient pt, queue_timestamp qts \
WHERE q.parent_id=:msp_id AND q.doctype=15 AND p.parent_id=q.doc_id \
AND d.parent_id=p.doc_id AND p.reference=patient_id and qts.queue_timestamp_id=p.doc_id \
AND year(begin_queue)=:begin_queue_year AND month(begin_queue)=:begin_queue_month AND DAY_OF_MONTH(begin_queue)=:begin_queue_dayOfMonth

sql.queue.remove_from_queue: \
DELETE FROM doc WHERE doc_id IN (SELECT doc_id FROM doc WHERE parent_id=:doc_id); \
DELETE FROM doc WHERE doc_id=:doc_id;; \
${sql.queue.queue_today};

sql.queue.add_to_queue: \
INSERT INTO doc (reference, doctype, parent_id, doc_id) \
SELECT :patient_id, 1, doc_id, :nextDbId1 FROM doc WHERE doctype=15 AND parent_id=:msp_id; \
INSERT INTO queue_timestamp (queue_timestamp_id, begin_queue) \
VALUES (:nextDbId1, :begin_queue); \
INSERT INTO doc (reference, doctype, parent_id, doc_id) VALUES (:employee_id, 13, :nextDbId1, :nextDbId2); \
${sql.queue.queue_today};

sql.declaration.all_physician_declaration: \
SELECT d.parent_id patient_id, e.doc_id declaration_id FROM doc e, doc d \
WHERE e.reference=:physician_id AND e.parent_id=d.doc_id AND d.doctype=14

sql.declaration.read_declaration: \
SELECT 'docbody' datatype, *  FROM docbody, (${sql.declaration.all_physician_declaration}) d \
WHERE declaration_id=docbody_id AND patient_id=:patient_id

sql.declaration.insert_declaration: \
INSERT INTO doc (reference, doctype, parent_id, doc_id) \
SELECT :physician_id, 13, doc_id, :nextDbId1 FROM doc WHERE doctype=14 AND parent_id=:patient_id; \
INSERT INTO docbody (docbody, docbody_id) VALUES (:docbody, :nextDbId1);

sql.declaration.add_to_declaration: \
${sql.docbody.update};

sql.medical.selectDoctorByMsp: \
SELECT d.* FROM ( ${sql.medical.selectEmployeerByMsp}) d, user_roles ur \
WHERE ur.username=d.username AND role='ROLE_USER' \
ORDER BY person_id DESC

sql.medical.selectEmployeerByMsp: \
SELECT e.* FROM (SELECT username, p.* FROM users u, person p where person_id=user_id) e  \
LEFT JOIN doc ON parent_id=person_id  \
WHERE reference =:msp_id \
ORDER BY person_id DESC

sql.medical.selectPatientByMsp: \
SELECT p.* FROM patient p \
LEFT JOIN doc ON parent_id=patient_id \
WHERE reference =:msp_id \
ORDER BY patient_id DESC

sql.medical.seekMspPatient: \
SELECT * FROM (${sql.medical.selectPatientByMsp}) p \
WHERE LOWER(patient_pib) LIKE LOWER(:q)

sql.medical.123selectPatientByMsp: \
SELECT * FROM patient p \
LEFT JOIN (SELECT * FROM doc ORDER BY doc_id DESC LIMIT 1) d ON parent_id=patient_id \
WHERE reference =:msp_id

sql.medical.selectPatientById: \
SELECT * FROM patient WHERE patient_id = :patient_id

sql.medical.selectPatients: \
SELECT * FROM patient WHERE patient_id < 10

sql.selectPatientById: \
SELECT * FROM patient WHERE patient_id=:dbId

sql.updatePatient: \
UPDATE patient SET patient_pib=:patient_pib  WHERE patient_id=:patient_id

sql.insertPatient: \
INSERT INTO patient (patient_id, patient_pib) VALUES (:doc_id, :patient_pib)

sql.insertAddress: \
INSERT INTO address (address_id, address_address) VALUES (:dbId, :address_address)

# DB загальне державне медичне страхування
sql.insurance.seekPatient: \
SELECT * FROM patient, uuid \
WHERE uuid_dbid=patient_id \
AND lower(patient_pib) LIKE lower(:seekPatient)

sql.insurance.selectPatients: \
SELECT * FROM patient

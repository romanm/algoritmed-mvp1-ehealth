# DB for all
sql.nextdbid: \
SELECT nextval('dbid')

sql.selectUUI_byId: \
SELECT * FROM uuid WHERE uuid_dbid=:dbId

sql.insertUUI: \
INSERT INTO uuid (uuid_dbid, uuid_uuid) VALUES (:nextDbId, :uuid)

# DB медичні документи
sql.doc.byId: \
SELECT * FROM doc d \
LEFT JOIN doctimestamp dts ON d.doc_id=dts.doctimestamp_id \
LEFT JOIN docbody db ON d.doc_id=db.docbody_id \
WHERE doc_id=:doc_id \
ORDER BY doc_id DESC

sql.doc.children: \
SELECT * FROM doc d \
LEFT JOIN doctimestamp dts ON d.doc_id=dts.doctimestamp_id \
LEFT JOIN docbody db ON d.doc_id=db.docbody_id \
WHERE parent_id=:parent_id \
ORDER BY doc_id DESC

sql.doc.insert: \
INSERT INTO doc (doc_id, doctype, parent_id) VALUES (:doc_id, :doctype, :parent_id)

sql.doc.delete: \
DELETE FROM doc WHERE doc_id=:doc_id

sql.docbody.insertEmpty: \
INSERT INTO docbody (docbody_id, ) VALUES (:doc_id)

sql.doctimestamp.insert: \
INSERT INTO doctimestamp (doctimestamp_id, doctimestamp) VALUES (:doc_id, :doctimestamp)

sql.meddoc.icdCodeP1: \
SELECT DISTINCT(x.parentId) ppId, y.* \
FROM (${sql.meddoc.icdCode.limit}) x \
, (${sql.meddoc.icdParent}) y WHERE y.icd_id=x.parentId ORDER BY icd_id

sql.meddoc.icdCode.count: \
SELECT count(*) FROM (${sql.meddoc.icdCode}) x

sql.meddoc.icdCode.limit: \
${sql.meddoc.icdCode} LIMIT :limit

#WHERE icd_code NOT LIKE '%-%' AND icd_code NOT LIKE '%.%' \
sql.meddoc.icdCode: \
SELECT * FROM (${sql.meddoc.icdParent}) icd \
WHERE icd_code NOT LIKE '%-%' \
AND (LOWER(icd_code) LIKE LOWER(:seekIcd) OR LOWER(icd_name) LIKE LOWER(:seekIcd))

sql.meddoc.icdChildren: \
${sql.meddoc.icdParent} AND icd10uatree_parent_id=:parentId

sql.meddoc.icdParent: \
SELECT t.icd10uatree_parent_id parentId, icd_id, i.icd_code,i.icd_name, i.icd_level \
 FROM icd i, icd10uatree t WHERE icd_id=icd10uatree_id

sql.meddoc.icd: \
SELECT * FROM icd

sql.meddoc.protocol.select: \
SELECT protocol_id, protocol_name FROM protocol

sql.meddoc.protocol.byId: \
SELECT protocol_doc FROM protocol WHERE protocol_id=:dbId

sql.meddoc.protocol.update: \
UPDATE protocol SET protocol_name=:name, protocol_doc=:doc WHERE protocol_id=:dbId;

sql.meddoc.protocol.insert: \
INSERT INTO protocol (protocol_id, protocol_name, protocol_doc) VALUES (:nextDbId, :name, :doc)

sql.meddoc.icpc2icd10.code: \
SELECT p.*, icd_name name FROM icpc2icd10 p, icd i WHERE i.icd_code=p.icd10 AND p.icpc2 = :code;

sql.meddoc.demo_icpc2_ua.exclusion: \
SELECT e.*, d.name FROM exclusion e , demo_icpc2_ua d WHERE d.code = e.exclusion AND e.code = :code

sql.meddoc.openIcPc2SubGroup: \
SELECT * FROM demo_icpc2_ua WHERE code=:code
#SELECT * FROM ICPC_2e_uk_v50 WHERE code=:code

sql.meddoc.openIcPc2SubGroup.en: \
SELECT * FROM ICPC_2e_no_v50 WHERE code=:code

sql.meddoc.en.openIcPc2SubGroup: \
SELECT * FROM ICPC_2e_no_v50 WHERE code=:code

# DB медичний заклад
sql.medical.selectPatientById: \
SELECT * FROM patient \
WHERE patient_id = :patient_id

sql.medical.selectPatients: \
SELECT * FROM patient

sql.selectPatientById: \
SELECT * FROM patient WHERE patient_id=:dbId

sql.insertPatient: \
INSERT INTO patient (patient_id, patient_pib) VALUES (:dbId, :patient_pib)

sql.insertAddress: \
INSERT INTO address (address_id, address_address) VALUES (:dbId, :address_address)

# DB загальне державне медичне страхування
sql.insurance.seekPatient: \
SELECT * FROM patient, uuid \
WHERE uuid_dbid=patient_id \
AND lower(patient_pib) LIKE lower(:seekPatient)

sql.insurance.selectPatients: \
SELECT * FROM patient


# DB for all
sql.nextDbId: \
SELECT nextval('dbid')

sql.db1.users.fromUsername: \
select username, pip, enabled from users where username=:username

sql.selectUUI_byId: \
SELECT * FROM uuid WHERE uuid_dbid=:dbId

sql.insertUUI: \
INSERT INTO uuid (uuid_dbid, uuid_uuid) VALUES (:nextDbId, :uuid)

sql.doctype.path: \
SELECT dt.*, CONCAT(dt1.path, NVL2(dt1.doctype,'.',''),dt.doctype) path \
FROM doctype dt LEFT JOIN ( \
SELECT dt.*, CONCAT(dt1.doctype, NVL2(dt1.doctype,'.',''),dt.doctype) path \
FROM doctype dt LEFT JOIN doctype dt1 ON dt.parent_id=dt1.doctype_id) dt1 ON dt.parent_id=dt1.doctype_id

# DB медичні документи
sql.doc.byId: \
${sql.doc.children.template} AND doc_id=:doc_id

sql.doc1.byId: \
SELECT * FROM doc d \
LEFT JOIN doctimestamp dts ON d.doc_id=dts.doctimestamp_id \
LEFT JOIN docchecked dck ON d.doc_id=docchecked_id \
LEFT JOIN docbody db ON d.doc_id=db.docbody_id \
WHERE doc_id=:doc_id \
ORDER BY doc_id DESC

sql.count.doc.to.check: \
SELECT count(*) FROM (${sql.doc.to.check}) x

sql.doc.to.check: \
SELECT * FROM doctimestamp dts \
LEFT JOIN docchecked dck ON doctimestamp_id=docchecked_id \
WHERE updated!=checked

sql.doc.children.template: \
SELECT * FROM doc d \
LEFT JOIN doctimestamp dts ON d.doc_id=dts.doctimestamp_id \
LEFT JOIN docchecked dck ON d.doc_id=docchecked_id \
LEFT JOIN docbody db ON d.doc_id=db.docbody_id \
, (SELECT doctype_id, path FROM (${sql.doctype.path}) t) t \
WHERE t.doctype_id=d.doctype

sql.doc.children: \
${sql.doc.children.template} AND parent_id IN \
(SELECT d.doc_id FROM doc d WHERE d.doc_id=:doc_id) \
ORDER BY doc_id DESC

sql.doc.children.children: \
${sql.doc.children.template} AND parent_id IN \
(SELECT d.doc_id  FROM doc d, doc dp WHERE dp.doc_id=:doc_id AND dp.doc_id=d.parent_id) \
ORDER BY doc_id DESC

sql.doc.children1: \
SELECT * FROM doc d \
LEFT JOIN doctimestamp dts ON d.doc_id=dts.doctimestamp_id \
LEFT JOIN docchecked dck ON d.doc_id=docchecked_id \
LEFT JOIN docbody db ON d.doc_id=db.docbody_id \
, (SELECT doctype_id, path FROM (${sql.doctype.path}) t) t \
WHERE t.doctype_id=d.doctype AND parent_id=:parent_id \
ORDER BY doc_id DESC

sql.doc.insert: \
INSERT INTO doc (doc_id, doctype, parent_id) VALUES (:doc_id, :doctype, :parent_id)

sql.msp.update: \
UPDATE msp SET msp_name=:name, msp_public_name=:public_name WHERE msp_id=:doc_id;

sql.msp.insert: \
INSERT INTO msp (msp_id, msp_name, msp_public_name) VALUES (:doc_id, :name, :public_name)

sql.msp.list: \
SELECT * FROM msp;

#docbody
sql_doc_update_docbody: \
UPDATE doc SET docbody=:docbody_id WHERE doc_id=:doc_id;

sql.docbody.update: \
UPDATE docbody SET docbody=:docbody WHERE docbody_id=:docbody_id;

sql.doc.delete.children: \
DELETE FROM doc WHERE parent_id=:doc_id

sql.doc.delete: \
DELETE FROM doc WHERE doc_id=:doc_id

sql.docbody.insertEmpty: \
INSERT INTO docbody (docbody_id, ) VALUES (:doc_id)
#docbody END

sql.doctimestamp.insert: \
INSERT INTO doctimestamp (doctimestamp_id, created, updated) VALUES (:doc_id, :created, :created)
sql_doctimestamp_update: \
UPDATE doctimestamp SET updated = :updated WHERE doctimestamp_id = :doc_id;

sql.docchecked.insert: \
INSERT INTO docchecked (docchecked_id, checked) VALUES (:doc_id, :checked)
sql.docchecked.update: \
UPDATE docchecked SET checked = :checked WHERE docchecked_id = :doc_id;
sql.docchecked.checked: \
UPDATE docchecked \
SET (checked) = (SELECT updated FROM doctimestamp WHERE doctimestamp_id=docchecked_id) \
WHERE docchecked_id = :doc_id;

#icpc2CodeExtention 
sql.icpc2Code.exclusion: \
SELECT i.* FROM exclusion e, demo_icpc2_ua i WHERE e.exclusion=i.code AND  e.code=:icpc2
sql.icpc2Code.consider: \
SELECT c.consider consider_name,* FROM icpc2consider c, demo_icpc2_ua i WHERE code=icpc2_code AND icpc2_code=:icpc2
sql.icpc2Code.inclusion: \
SELECT icpc2_code icpc2, inclusion FROM icpc2inclusion WHERE icpc2_code=:icpc2
sql.icpc2Code.icd10: \
SELECT d.icd_code, d.icd_id, d.icd_name FROM icpc2icd10 ii, icd d WHERE ii.icd10=d.icd_code AND icpc2=:icpc2
sql.icd10InIcpc2: \
SELECT ii.*, name, d.icd_code, d.icd_id,  d.icd_name FROM demo_icpc2_ua i, icpc2icd10 ii, icd d \
WHERE i.code=icpc2 AND ii.icd10=d.icd_code AND icd_code LIKE :icd_code
#icpc2CodeExtention END


sql.meddoc.icpc2Code.count: \
SELECT count(*) FROM (${sql.meddoc.icpc2Code}) x
sql.meddoc.icpc2Code.limit: \
${sql.meddoc.icpc2Code} LIMIT :limit

sql.meddoc.icpc2Code: \
SELECT * FROM demo_icpc2_ua \
WHERE LOWER(concat(code,name,shorttitle,icd10,inclusion,exclusion,criteria,consider,note)) LIKE LOWER(:seekStr)

sql.meddoc.icdCodeP1: \
SELECT DISTINCT(x.parentId) ppId, y.* \
FROM (${sql.meddoc.icdCode.limit}) x \
, (${sql.meddoc.icdParent}) y WHERE y.icd_id=x.parentId ORDER BY icd_id

sql.meddoc.icdCode.count: \
SELECT count(*) FROM (${sql.meddoc.icdCode}) x

sql.meddoc.icdCode.limit: \
${sql.meddoc.icdCode} LIMIT :limit

#WHERE icd_code NOT LIKE '%-%' AND icd_code NOT LIKE '%.%' \
sql.meddoc.icdCode: \
SELECT * FROM (${sql.meddoc.icdParent}) icd \
WHERE icd_code NOT LIKE '%-%' \
AND (LOWER(icd_code) LIKE LOWER(:seekStr) OR LOWER(icd_name) LIKE LOWER(:seekStr))

sql.meddoc.icdChildren: \
${sql.meddoc.icdParent} AND icd10uatree_parent_id=:parentId

sql.meddoc.icdParent: \
SELECT t.icd10uatree_parent_id parentId, icd_id, i.icd_code,i.icd_name, i.icd_level \
FROM icd i, icd10uatree t WHERE icd_id=icd10uatree_id

sql.meddoc.icd: \
SELECT * FROM icd

sql.meddoc.protocol.select: \
SELECT protocol_id, protocol_name FROM protocol

sql.docbody.byId: \
SELECT docbody FROM docbody WHERE docbody_id=:doc_id

sql.meddoc.protocol.byId: \
SELECT docbody FROM docbody WHERE docbody_id=:dbId
#SELECT protocol_doc FROM protocol WHERE protocol_id=:dbId

sql.meddoc.protocol.name.update: \
UPDATE protocol SET protocol_name=:name WHERE protocol_id=:dbId;

sql.meddoc.docbody.update: \
UPDATE docbody SET docbody=:doc WHERE docbody_id=:dbId;
#UPDATE protocol SET protocol_name=:name, protocol_doc=:doc WHERE protocol_id=:dbId;

sql.meddoc.protocol.datadictionary.icd10: \
SELECT d.doc_id,d.parent_id,d.doctype, p.path,i.icd_id,i.icd_code,i.icd_name \
FROM ( \
SELECT * FROM doc WHERE parent_id=:parent_id AND doctype=7 \
) d, protocoldd2icd10 pi ,icd i, \
(${sql.doctype.path}) p \
WHERE pi.protocoldd=d.doc_id \
AND i.icd_id=pi.icd10 \
AND p.doctype_id=d.doctype \
ORDER BY doc_id DESC

sql.meddoc.protocol.insert: \
INSERT INTO protocol (protocol_id, protocol_name, protocol_doc) VALUES (:nextDbId, :name, :doc)

sql.meddoc.protocoldd2icd10.insert: \
INSERT INTO protocoldd2icd10 (protocoldd, icd10, doctype) VALUES (:nextDbId, :icd_id, 7)

sql.meddoc.icpc2icd10.code: \
SELECT p.*, icd_name name FROM icpc2icd10 p, icd i WHERE i.icd_code=p.icd10 AND p.icpc2 = :code;

sql.meddoc.demo_icpc2_ua.exclusion: \
SELECT e.*, d.name FROM exclusion e , demo_icpc2_ua d WHERE d.code = e.exclusion AND e.code = :code

sql.meddoc.openIcPc2SubGroup: \
SELECT * FROM demo_icpc2_ua WHERE code=:code
#SELECT * FROM ICPC_2e_uk_v50 WHERE code=:code

sql.meddoc.openIcPc2SubGroup.en: \
SELECT * FROM ICPC_2e_no_v50 WHERE code=:code

sql.meddoc.en.openIcPc2SubGroup: \
SELECT * FROM ICPC_2e_no_v50 WHERE code=:code

# DB медичний заклад
sql.medical.selectPatientById: \
SELECT * FROM patient WHERE patient_id = :patient_id

sql.medical.selectPatients: \
SELECT * FROM patient

sql.selectPatientById: \
SELECT * FROM patient WHERE patient_id=:dbId

sql.insertPatient: \
INSERT INTO patient (patient_id, patient_pib) VALUES (:dbId, :patient_pib)

sql.insertAddress: \
INSERT INTO address (address_id, address_address) VALUES (:dbId, :address_address)

# DB загальне державне медичне страхування
sql.insurance.seekPatient: \
SELECT * FROM patient, uuid \
WHERE uuid_dbid=patient_id \
AND lower(patient_pib) LIKE lower(:seekPatient)

sql.insurance.selectPatients: \
SELECT * FROM patient

